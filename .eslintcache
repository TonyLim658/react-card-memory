[{"D:\\git\\react-card-memory\\src\\App.tsx":"1","D:\\git\\react-card-memory\\src\\components\\Card.tsx":"2","D:\\git\\react-card-memory\\src\\index.tsx":"3","D:\\git\\react-card-memory\\src\\components\\Card.style.ts":"4","D:\\git\\react-card-memory\\src\\reportWebVitals.ts":"5","D:\\git\\react-card-memory\\src\\components\\CardBoard.tsx":"6","D:\\git\\react-card-memory\\src\\components\\CardBoard.style.ts":"7","D:\\git\\react-card-memory\\src\\components\\Selector.tsx":"8","D:\\git\\react-card-memory\\src\\utils.ts":"9"},{"size":1344,"mtime":1610826242503,"results":"10","hashOfConfig":"11"},{"size":1014,"mtime":1610378337563,"results":"12","hashOfConfig":"11"},{"size":500,"mtime":1609190832273,"results":"13","hashOfConfig":"11"},{"size":1962,"mtime":1610471905231,"results":"14","hashOfConfig":"11"},{"size":425,"mtime":1609190832273,"results":"15","hashOfConfig":"11"},{"size":2795,"mtime":1610826264244,"results":"16","hashOfConfig":"11"},{"size":346,"mtime":1610471928457,"results":"17","hashOfConfig":"11"},{"size":380,"mtime":1610826176911,"results":"18","hashOfConfig":"11"},{"size":95,"mtime":1610825591626,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1hxr858",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"D:\\git\\react-card-memory\\src\\App.tsx",[],["40","41"],"D:\\git\\react-card-memory\\src\\components\\Card.tsx",[],"D:\\git\\react-card-memory\\src\\index.tsx",[],"D:\\git\\react-card-memory\\src\\components\\Card.style.ts",[],"D:\\git\\react-card-memory\\src\\reportWebVitals.ts",[],"D:\\git\\react-card-memory\\src\\components\\CardBoard.tsx",["42"],"import React, { useState } from 'react';\r\n// Styles\r\nimport { Wrapper } from './CardBoard.style'\r\n// Components\r\nimport Card from './Card'\r\n\r\nexport type AnswerObject = {\r\n    firstCardSelected: number | undefined;\r\n    secondCardSelected: number | undefined;\r\n}\r\nconst EMPTY_ANSWER = {firstCardSelected: undefined, secondCardSelected: undefined}\r\n\r\ntype Props = {\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    cardImg: string[];\r\n}\r\n\r\nconst CardBoard: React.FC<Props> = ({\r\n    callback,\r\n    cardImg\r\n}) => {\r\n    const [userAnswer, setUserAnswer] = useState<AnswerObject>(EMPTY_ANSWER);\r\n    const [cardRevealed, setCardRevealed] = useState<boolean[]>([]);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    // TODO set as more generic\r\n    console.log(cardImg);\r\n\r\n    const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n        const val: number = Number(e.currentTarget.value)\r\n        console.log('bui');\r\n        let answerObject: AnswerObject;\r\n        if (userAnswer?.firstCardSelected) {\r\n            answerObject = {\r\n                firstCardSelected: userAnswer?.firstCardSelected,\r\n                secondCardSelected: val\r\n            }\r\n        } else {\r\n            answerObject = {\r\n                firstCardSelected: val,\r\n                secondCardSelected: undefined\r\n            }\r\n        }\r\n        setUserAnswer(answerObject);\r\n        console.log(answerObject)\r\n        if(answerObject?.firstCardSelected && answerObject?.secondCardSelected) {\r\n            console.log('waiting');\r\n            const correct = cardImg[answerObject.firstCardSelected-1] === cardImg[answerObject.secondCardSelected-1];\r\n            cardRevealed[answerObject?.firstCardSelected] = \r\n                                    cardRevealed[answerObject.secondCardSelected] = correct;\r\n            if((cardRevealed.length - 1) === cardImg.length && cardRevealed.every(e => e)) {\r\n                setGameOver(true);\r\n            }\r\n            console.log(cardRevealed);\r\n            // TODO waiting with state\r\n            setUserAnswer(EMPTY_ANSWER);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            {!gameOver ?\r\n                (<div className='cardboard'>\r\n                    {cardImg.map((path, ind) => (\r\n                        <Card\r\n                            key={ind}\r\n                            num={ind+1}\r\n                            callback={checkAnswer}\r\n                            imagePath={path}\r\n                            userAnswer={userAnswer}\r\n                            cardRevealed={cardRevealed}\r\n                        />\r\n                    ))}\r\n                </div>)\r\n            : <h1><button onClick={callback}>FINI</button></h1>}\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nexport default CardBoard;","D:\\git\\react-card-memory\\src\\components\\CardBoard.style.ts",[],"D:\\git\\react-card-memory\\src\\components\\Selector.tsx",[],"D:\\git\\react-card-memory\\src\\utils.ts",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":23,"column":26,"nodeType":"49","messageId":"50","endLine":23,"endColumn":41},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"@typescript-eslint/no-unused-vars","'setCardRevealed' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]