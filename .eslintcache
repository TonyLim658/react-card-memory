[{"D:\\git\\react-card-memory\\src\\App.tsx":"1","D:\\git\\react-card-memory\\src\\components\\Card.tsx":"2","D:\\git\\react-card-memory\\src\\index.tsx":"3","D:\\git\\react-card-memory\\src\\components\\Card.style.ts":"4","D:\\git\\react-card-memory\\src\\reportWebVitals.ts":"5","D:\\git\\react-card-memory\\src\\components\\CardBoard.tsx":"6","D:\\git\\react-card-memory\\src\\components\\CardBoard.style.ts":"7","D:\\git\\react-card-memory\\src\\components\\Selector.tsx":"8"},{"size":524,"mtime":1610660247789,"results":"9","hashOfConfig":"10"},{"size":1014,"mtime":1610378337563,"results":"11","hashOfConfig":"10"},{"size":500,"mtime":1609190832273,"results":"12","hashOfConfig":"10"},{"size":1962,"mtime":1610471905231,"results":"13","hashOfConfig":"10"},{"size":425,"mtime":1609190832273,"results":"14","hashOfConfig":"10"},{"size":3051,"mtime":1610480458881,"results":"15","hashOfConfig":"10"},{"size":346,"mtime":1610471928457,"results":"16","hashOfConfig":"10"},{"size":169,"mtime":1610661198110,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3ykd3l",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\git\\react-card-memory\\src\\App.tsx",[],"D:\\git\\react-card-memory\\src\\components\\Card.tsx",[],["37","38"],"D:\\git\\react-card-memory\\src\\index.tsx",[],"D:\\git\\react-card-memory\\src\\components\\Card.style.ts",[],["39","40"],"D:\\git\\react-card-memory\\src\\reportWebVitals.ts",[],"D:\\git\\react-card-memory\\src\\components\\CardBoard.tsx",["41","42","43","44"],"import React, { useState } from 'react';\r\n// Styles\r\nimport { Wrapper } from './CardBoard.style'\r\n// Components\r\nimport Card from './Card'\r\n// Images\r\nimport img1 from '../images/boarding_pass.jpg';\r\nimport img2 from '../images/code.png';\r\nimport img3 from '../images/nook.jpg';\r\nimport img4 from '../images/qr_code.png';\r\nimport img5 from '../images/todd_ross.jpg';\r\n\r\nexport type AnswerObject = {\r\n    firstCardSelected: number | undefined;\r\n    secondCardSelected: number | undefined;\r\n}\r\nconst EMPTY_ANSWER = {firstCardSelected: undefined, secondCardSelected: undefined}\r\n\r\nconst CardBoard = () => {\r\n    const [userAnswer, setUserAnswer] = useState<AnswerObject>(EMPTY_ANSWER);\r\n    const [cardRevealed, setCardRevealed] = useState<boolean[]>([]);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    // TODO set as more generic\r\n    const cardImg: string[] = [img1, img2, img1, img2, img3, img3];\r\n\r\n    // TODO start\r\n    const startTrivia = async () => {\r\n        setUserAnswer(EMPTY_ANSWER);\r\n        // setCardRevealed([false]);\r\n        // TODO better setting\r\n    }\r\n    \r\n\r\n    const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n        const val: number = Number(e.currentTarget.value)\r\n        console.log('bui');\r\n        let answerObject: AnswerObject;\r\n        if (userAnswer?.firstCardSelected) {\r\n            answerObject = {\r\n                firstCardSelected: userAnswer?.firstCardSelected,\r\n                secondCardSelected: val\r\n            }\r\n        } else {\r\n            answerObject = {\r\n                firstCardSelected: val,\r\n                secondCardSelected: undefined\r\n            }\r\n        }\r\n        setUserAnswer(answerObject);\r\n        console.log(answerObject)\r\n        if(answerObject?.firstCardSelected && answerObject?.secondCardSelected) {\r\n            console.log('waiting');\r\n            const correct = cardImg[answerObject.firstCardSelected-1] === cardImg[answerObject.secondCardSelected-1];\r\n            cardRevealed[answerObject?.firstCardSelected] = \r\n                                    cardRevealed[answerObject.secondCardSelected] = correct;\r\n            if((cardRevealed.length - 1) === cardImg.length && cardRevealed.every(e => e)) {\r\n                setGameOver(true);\r\n            }\r\n            console.log(cardRevealed);\r\n            // TODO waiting with state\r\n            setUserAnswer(EMPTY_ANSWER);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            {!gameOver ?\r\n                (<div className='cardboard'>\r\n                    {cardImg.map((path, ind) => (\r\n                        <Card\r\n                            key={ind}\r\n                            num={ind+1}\r\n                            callback={checkAnswer}\r\n                            imagePath={path}\r\n                            userAnswer={userAnswer}\r\n                            cardRevealed={cardRevealed}\r\n                        />\r\n                    ))}\r\n                </div>)\r\n            : <h1>FINI</h1>}\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nexport default CardBoard;","D:\\git\\react-card-memory\\src\\components\\CardBoard.style.ts",[],"D:\\git\\react-card-memory\\src\\components\\Selector.tsx",["45"],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"46","replacedBy":"50"},{"ruleId":"48","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":10,"column":8,"nodeType":"54","messageId":"55","endLine":10,"endColumn":12},{"ruleId":"52","severity":1,"message":"56","line":11,"column":8,"nodeType":"54","messageId":"55","endLine":11,"endColumn":12},{"ruleId":"52","severity":1,"message":"57","line":21,"column":26,"nodeType":"54","messageId":"55","endLine":21,"endColumn":41},{"ruleId":"52","severity":1,"message":"58","line":27,"column":11,"nodeType":"54","messageId":"55","endLine":27,"endColumn":22},{"ruleId":"52","severity":1,"message":"59","line":1,"column":17,"nodeType":"54","messageId":"55","endLine":1,"endColumn":25},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],["60"],["61"],"@typescript-eslint/no-unused-vars","'img4' is defined but never used.","Identifier","unusedVar","'img5' is defined but never used.","'setCardRevealed' is assigned a value but never used.","'startTrivia' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]